    
    supprimer en allant vers la droite

            for( i = 0; i < 2; i++){
                actualChunksRepro.splice(i, 1);
                chunkID++
            }

        //generation xleft
        if ((position.inGame.x >= XGenLeft)){
            console.log(actualChunksRepro);
            for( i = 0; i < 2; i++){
                actualChunksRepro.splice(i, 1);
                chunkID++
            }
            genActualChunk();
            
        }

Vitesse dÃ©filement jeu plus lente : 
function loop(){
    if (keyState.up == true){
        position.html.y += 20;
        position.inGame.y += 20;
    }
    if (keyState.down == true){
        position.html.y -= 20;
        position.inGame.y -= 20;
    }
    if (keyState.left == true){
        position.html.x += 20;
        position.inGame.x += 20;
    }
    if (keyState.right == true) {
        position.html.x -= 20;
        position.inGame.x -= 20;
    }

    function loop(){
    if (keyState.up == true){
        position.html.y += 5;
        position.inGame.y += 5;
    }
    if (keyState.down == true){
        position.html.y -= 5;
        position.inGame.y -= 5;
    }
    if (keyState.left == true){
        position.html.x += 5;
        position.inGame.x += 5;
    }
    if (keyState.right == true) {
        position.html.x -= 5;
        position.inGame.x -= 5;
    }

    function chunk(num, color){
    this.num = num;
    this.color = color;
}
/*class chunks {
    constructor(num, color){
        this.num = num;
        this.color = color;       
    }
}*/
let chunk1 = new chunk(1, "green");

let chunks  = {

}
transform: scaleX(1.3) scaleY(1.5) scaleZ(0.1) rotateX(-20deg) rotateY(-35deg) rotateZ(-30deg) translateX(15px) translateY(-40px) translateZ(35px) skewX(20deg) skewY(-10deg);
transform: scaleX(-0.9) scaleY(1.4) scaleZ(0.1) rotateX(20deg) rotateY(20deg) rotateZ(0deg) translateX(-60px) translateY(5px) translateZ(475px) skewX(125deg) skewY(65deg)